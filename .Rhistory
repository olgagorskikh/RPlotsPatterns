)
ggplot(data=df4, aes(x=x, y=y)) +
geom_line(size=1, aes(linetype=Method))+
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
scale_color_manual(values=c("blue","red"), name ="")+
scale_linetype_manual(values=c("dashed","solid"))+
theme_bw() +
theme(
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
ggplot(data=df4, aes(x=x, y=y)) +
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
scale_color_manual(values=c("blue","red"), name ="")+
#set line types
scale_linetype_manual(values=c("dashed","solid"))+
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
ggplot(data=df4, aes(x=x, y=y)) +
geom_line(size=1, aes(linetype=Method))+
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
scale_color_manual(values=c("blue","red"), name ="")+
#set line types
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
ggplot(data=df4, aes(x=x, y=y)) +
geom_line(size=1, aes(linetype=Method))+
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
scale_color_manual(values=c("blue","red"), name ="")+
#set line types
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
ggplot(data=df4, aes(x=x, y=y)) +
geom_line(size=1, aes(linetype=Method))+
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
scale_color_manual(values=c("blue","red"), name ="")+
#set line types
scale_linetype_manual(values=c("dashed","solid"))+
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
ggplot(data=df4, aes(x=x, y=y)) +
geom_line(size=1, aes(linetype=Method, color=Method))+
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
scale_color_manual(values=c("blue","red"), name ="")+
#set line types manually
scale_linetype_manual(values=c("dashed","solid"))+
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
ggplot(data=df4, aes(x=x, y=y)) +
geom_line(size=1, aes(color=Method))+
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
scale_color_manual(values=c("blue","red"), name ="")+
#set line types manually
scale_linetype_manual(values=c("dashed","solid"))+
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
ggplot(data=df4, aes(x=x, y=y)) +
geom_line(size=1, aes(linetype=Method))+
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
ylim(0, 4) +
#set line types manually
scale_linetype_manual(values=c("dashed","solid"))+
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots <- list()
#titles of four historgrams to plot
names <- list("d=0.1","d=2","d=10", "d=20")
ditributionNames <-list("normal distribution","student distribution (df=3)")
xlabTitle <- "Amount of outliers, %"
#make a common legend for several plots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
for (i in 1:4)
{
currentData <- data[(3*i)-2:(3-i)+1,]
df2 = data.frame(y = currentData[,4], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,7], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
}
for (i in 1:4)
{
currentData <- data[((3*i)-2):((3-i)+1),]
df2 = data.frame(y = currentData[,4], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,7], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
}
data <- read.table("DataForMultipleHistos.txt",header=T,sep="\t")
for (i in 1:4)
{
currentData <- data[((3*i)-2):((3-i)+1),]
df2 = data.frame(y = currentData[,4], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,7], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
}
data <- read.table("DataForMultipleHistos.txt",header=T,sep="\t")
library('ggplot2')
library('gridExtra')
plots <- list()
#titles of four historgrams to plot
names <- list("d=0.1","d=2","d=10", "d=20")
ditributionNames <-list("normal distribution","student distribution (df=3)")
xlabTitle <- "Amount of outliers, %"
#make a common legend for several plots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
for (i in 1:4)
{
currentData <- data[((3*i)-2):((3-i)+1),]
df2 = data.frame(y = currentData[,4], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,7], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
}
df2 = data.frame(y = currentData[,"All"], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,"All_s"], x = currentData[,"Outl"]*100)
for (i in 1:4)
{
currentData <- data[((3*i)-2):((3-i)+1),]
df2 = data.frame(y = currentData[,"All"], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,"All_s"], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
}
data <- read.table("DataForMultipleHistos.txt",header=T,sep="\t")
library('ggplot2')
library('gridExtra')
plots <- list()
#titles of four historgrams to plot
names <- list("d=0.1","d=2","d=10", "d=20")
ditributionNames <-list("normal distribution","student distribution (df=3)")
xlabTitle <- "Amount of outliers, %"
#make a common legend for several plots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
for (i in 1:4)
{
currentData <- data[((3*i)-2):((3-i)+1),]
df2 = data.frame(y = currentData[,"All"], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,"All_s"], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
}
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
i=2
currentData <- data[((3*i)-2):((3-i)+1),]
df2 = data.frame(y = currentData[,"All"], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,"All_s"], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
df2 = data.frame(y = currentData[,"All"], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,"All_s"], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4$id <- factor(df4$id)
typeof(df4)
df4 <- as.data.frame(lapply(df4, unlist))
df4$id <- factor(df4$id)
plots <- list()
#titles of four historgrams to plot
names <- c("d=0.1","d=2","d=10", "d=20")
ditributionNames <-c("normal distribution","student distribution (df=3)")
xlabTitle <- "Amount of outliers, %"
#make a common legend for several plots
#https://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
for (i in 1:4)
{
currentData <- data[((3*i)-2):((3-i)+1),]
df2 = data.frame(y = currentData[,"All"], x = currentData[,"Outl"]*100)
df3 = data.frame(y = currentData[,"All_s"], x = currentData[,"Outl"]*100)
df2$id <- ditributionNames[1]
df3$id <- ditributionNames[2]
df4 <- rbind(df2,df3)
df4 <- as.data.frame(lapply(df4, unlist))
df4$id <- factor(df4$id)
currentPlot<- ggplot(data=df4, aes(x=factor(x), y=y, fill=id)) +
geom_bar(width=.6,stat="identity", position=position_dodge(), colour="black") +
xlab(xlabTitle) +
ylab("") +
ylim(0, 130) +
ggtitle(names[[i]])+
scale_fill_manual(values=c("gray57", "gray15"), name ="")+
theme_bw() +
theme(
axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14),
axis.text = element_text(size = 14),
legend.key = element_rect(fill = "navy"),
legend.background = element_rect(fill = "white"),
legend.position="bottom",
legend.text = element_text(size = 14),
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
plots[[i]] = currentPlot
}
mylegend<-g_legend(p1)
p5 <- grid.arrange(top="Percentage of all points detected",
arrangeGrob(plots[[1]] + theme(legend.position="none"),
plots[[2]] + theme(legend.position="none"),
plots[[3]] + theme(legend.position="none"),
plots[[4]] + theme(legend.position="none"),
nrow=1),
mylegend, nrow=2,heights=c(10, 1))
mylegend<-g_legend(plots[[1]])
finalPlot <- grid.arrange(top="Percentage of all points detected",
arrangeGrob(plots[[1]] + theme(legend.position="none"),
plots[[2]] + theme(legend.position="none"),
plots[[3]] + theme(legend.position="none"),
plots[[4]] + theme(legend.position="none"),
nrow=1),
mylegend, nrow=2,heights=c(10, 1))
data <- read.table("DataForTwoCurvesPlot.txt",header=T,sep="\t")
df2 = data.frame(y = data[,2], x = data[,"DS"])
df3 = data.frame(y = data[,3], x = data[,"DS"])
df2$Method <- "BP"
df3$Method <- "NSA"
df4 <- rbind(df2,df3)
df4$Method<- factor(df4$Method)
ggplot(data=df4, aes(x=x, y=y)) +
#draw line with different linetypes
geom_line(size=1, aes(linetype=Method))+
#axis titles
xlab("Data size, pc") +
ylab("Number of changes detected, pc") +
#set limits for y axis
ylim(0, 4) +
#set line types manually (to redo the automatic selection of types)
scale_linetype_manual(values=c("dashed","solid"))+
theme_bw() +
theme(
#axis adjustment
axis.title.x = element_text(face="bold",size=14),
axis.title.y = element_text(face="bold",size=14),
axis.text = element_text(size = 14),
#legend adjustment
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
#grid adjustment
panel.grid.major = element_line(colour = "grey"),
panel.grid.minor = element_blank()
)
